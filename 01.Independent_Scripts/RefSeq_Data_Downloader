#!/usr/bin/env python

"""
########################################################################
# Author:       Carlos A. Ruiz Perez
# Email:        cruizperez3@gatech.edu
# Intitution:   Georgia Institute of Technology
# Version:      0.9
# Date:         March 05, 2020

# Description: Download the latest refseq protein dataset from NCBI and
# the accompanying genbank files necessary to create the database.
########################################################################
"""

################################################################################
"""---0.0 Import Modules---"""
from shutil import which
from shutil import copyfileobj
from shutil import rmtree
import subprocess
from pathlib import Path
import urllib.request
import gzip

################################################################################
"""---1.0 Define Functions---"""
def refseq_fasta_downloader(output_folder, ascp_key = None):
    # Requirements
    if ascp_key == None:
        ascp_key = get_aspera_key()
    release_file = urllib.request.urlopen("https://ftp.ncbi.nlm.nih.gov/refseq/release/RELEASE_NUMBER")
    release_number = release_file.readline().decode('utf-8').strip()
    temp_fasta_files = Path(output_folder) / "01.temp_proteins"
    merged_db_folder = Path(output_folder) / "01.Protein_DB"
    Path(temp_fasta_files).mkdir(parents=True, exist_ok=True)
    Path(merged_db_folder).mkdir(parents=True, exist_ok=True)
    # Download compressed protein files
    subprocess.call(["ascp", '-QTr', '-d', '-l', '100M', '-E', '*wgs_mstr*',
                    '-E', '*rna*', '-E', '*genomic*', '-E', '*.gpff.gz',
                    '-i', ascp_key, 'anonftp@ftp.ncbi.nlm.nih.gov:/refseq/release/viral/',
                    temp_fasta_files])
    subprocess.call(["ascp", '-QTr', '-d', '-l', '100M', '-E', '*wgs_mstr*',
                    '-E', '*rna*', '-E', '*genomic*', '-E', '*.gpff.gz',
                    '-i', ascp_key, 'anonftp@ftp.ncbi.nlm.nih.gov:/refseq/release/bacteria/',
                    temp_fasta_files])
    subprocess.call(["ascp", '-QTr', '-d', '-l', '100M', '-E', '*wgs_mstr*',
                    '-E', '*rna*', '-E', '*genomic*', '-E', '*.gpff.gz',
                    '-i', ascp_key, 'anonftp@ftp.ncbi.nlm.nih.gov:/refseq/release/archaea/',
                    temp_fasta_files])
    # Get downloaded files
    viral_list = searching_all_files(temp_fasta_files / "viral")
    bacteria_list = searching_all_files(temp_fasta_files / "bacteria")
    archaea_list = searching_all_files(temp_fasta_files / "archaea")
    final_list = viral_list + bacteria_list + archaea_list
    with open(Path(merged_db_folder) / ("01.Refseq_Protein_Rel" + release_number + ".faa"), 'w') as merged_db:
        for file in final_list:
            with gzip.open(file, 'rt') as temp_file:
                copyfileobj(temp_file,merged_db)
                Path.unlink(file)
    rmtree(temp_fasta_files)


def refseq_genbank_downloader(output_folder, ascp_key = None):
    # Requirements
    if ascp_key == None:
        ascp_key = get_aspera_key()
    release_file = urllib.request.urlopen("https://ftp.ncbi.nlm.nih.gov/refseq/release/RELEASE_NUMBER")
    release_number = release_file.readline().decode('utf-8').strip()
    temp_gb_files = Path(output_folder) / "02.temp_genbank"
    Path(temp_gb_files).mkdir(parents=True, exist_ok=True)
    # Download compressed protein files
    subprocess.call(["ascp", '-QTr', '-d', '-l', '100M', '-E', '*wgs_mstr*',
                    '-E', '*rna*', '-E', '*genomic*', '-E', '*.faa.gz',
                    '-i', ascp_key, 'anonftp@ftp.ncbi.nlm.nih.gov:/refseq/release/viral/',
                    temp_gb_files])
    subprocess.call(["ascp", '-QTr', '-d', '-l', '100M', '-E', '*wgs_mstr*',
                    '-E', '*rna*', '-E', '*genomic*', '-E', '*.faa.gz',
                    '-i', ascp_key, 'anonftp@ftp.ncbi.nlm.nih.gov:/refseq/release/bacteria/',
                    temp_gb_files])
    subprocess.call(["ascp", '-QTr', '-d', '-l', '100M', '-E', '*wgs_mstr*',
                    '-E', '*rna*', '-E', '*genomic*', '-E', '*.faa.gz',
                    '-i', ascp_key, 'anonftp@ftp.ncbi.nlm.nih.gov:/refseq/release/archaea/',
                    temp_gb_files])
    # Get downloaded files
    viral_list = searching_all_files(temp_gb_files / "viral")
    bacteria_list = searching_all_files(temp_gb_files / "bacteria")
    archaea_list = searching_all_files(temp_gb_files / "archaea")
    final_list = viral_list + bacteria_list + archaea_list
    return final_list

def get_aspera_key():
    path_to_ascp = which("ascp")
    install_folder = Path(path_to_ascp).parents[1]
    key = str(install_folder) + "/etc/asperaweb_id_dsa.openssh"
    return key

def searching_all_files(directory):
    dirpath = Path(directory)
    assert(dirpath.is_dir())
    file_list = []
    for protein_file in dirpath.iterdir():
        if protein_file.is_file():
            file_list.append(protein_file)
        else:
            continue
    return file_list


################################################################################
"""---2.0 Main Function---"""

def main():
    import argparse, sys
    # Setup parser for arguments.
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
            description='''This script downloads the fasta and genbank files that\n'''
            '''are needed to build the RefSeq annotation database. By default it\n'''
            '''downloads both but you can specify either\n'''
            '''Usage: ''' + sys.argv[0] + ''' -f [Output folder]\n'''
            '''Global mandatory parameters: -f [Output folder]\n'''
            '''Optional Database Parameters: See ''' + sys.argv[0] + ' -h')
    parser.add_argument('-f', '--folder', dest='folder', action='store', required=False,
                        help='Folder to store the fasta and genbank files')
    parser.add_argument('--proteins', dest='proteins', action='store_true', required=False,
                        help='Only download the protein fasta files.')
    parser.add_argument('--genbank', dest='genbank', action='store_true', required=False,
                        help='Only download the genbank files')
    args = parser.parse_args()

    folder = args.folder
    proteins = args.proteins
    genbank = args.genbank

    # ----------------------------
    if proteins == False and genbank == False:
        print("Downloading protein fasta files")
        refseq_fasta_downloader(folder)
        print("Downloading protein genbank files")
        refseq_genbank_downloader(folder)
    elif proteins == True:
        print("Downloading protein fasta files")
        refseq_fasta_downloader(folder)
    elif genbank == True:
        print("Downloading protein genbank files")
        refseq_genbank_downloader(folder)
    # ----------------------------

if __name__ == "__main__":
    main()