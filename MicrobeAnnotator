#!/usr/bin/env python

"""
########################################################################
# Author:       Carlos A. Ruiz Perez
# Email:        cruizperez3@gatech.edu
# Intitution:   Georgia Institute of Technology
# Version:      0.9
# Date:         May 10, 2020

# Description: MicrobeAnnotator parses protein fasta files and annotates them
# using several databases in an iterative fashion and summarizes the findings
# using KEGG modules based on KO numbers associated with best database matches.
########################################################################
"""

################################################################################
"""---0.0 Import Modules---"""
import multiprocessing
from functools import partial
from pathlib import Path
from shutil import rmtree
from shutil import copyfile
from independent_scripts import protein_search
from independent_scripts import fasta_filter_list
from independent_scripts import sqlite3_search
from independent_scripts import ko_mapper
from shutil import which

################################################################################
"""---1.0 Main Function---"""

def main():
    import argparse, sys, textwrap
    # Setup parser for arguments.
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
            description='''MicrobeAnnotator parses protein fasta files and annotates them\n'''
            '''using several databases in an iterative fashion and summarizes the findings\n'''
            '''using KEGG modules based on KO numbers associated with best database matches.\n'''
            '''Usage: ''' + sys.argv[0] + ''' -i [protein file] -o [output folder] -d [MicrobeAnnotator db folder]\n'''
            '''-m [search method]\n'''
            '''Global mandatory parameters: -i [protein file] -o [output folder] -d [MicrobeAnnotator db folder]\n'''
            '''-m [search method]\n'''
            '''Optional Database Parameters: See ''' + sys.argv[0] + ' -h')
    general_options = parser.add_argument_group('Mandatory i/o options.')
    general_options.add_argument('-i', '--input', dest='input_list', action='store', required=True, nargs='+',
                        help='Space-separated list of protein files to parse.')
    general_options.add_argument('-o', '--outdir', dest='output_dir', action='store', required=True,
                        help='Directory to store results.')
    general_options.add_argument('-d', '--database', dest='database_folder', action='store', required=True,
                        help='Directory where MicrobeAnnotator databases are located.')
    search_options = parser.add_argument_group('Options for search process.')
    search_options.add_argument('-m', '--method', dest='method', action='store', required=True,
                        help='Method used to create databases and to perform seaches. One of "blast", "diamond" or "sword".')
    search_options.add_argument('--kofam_bin', dest='kofam_bin', action='store', required=False, default=None,
                        help='Directory where KOFamscan binaries are located. By default assumes it is in PATH.')
    search_options.add_argument('--method_bin', dest='method_bin', action='store', required=False, default=None,
                        help='Directory where KOFamscan binaries are located. By default assumes it is in PATH.')
    search_options.add_argument('--id_perc', dest='id_perc', action='store', required=False, default=40, type=int,
                        help='Minimum identity percentage to retain a hit. By default 40.')
    search_options.add_argument('--bitscore', dest='bitscore', action='store', required=False, default=50, type=int,
                        help='Minimum bitscore to retain a hit. By default 50.')
    search_options.add_argument('--evalue', dest='evalue', action='store', required=False, default=0.01, type=float,
                        help='Maximum evalue to retain a hit. By default 0.01.')
    search_options.add_argument('--aln_percent', dest='aln_percent', action='store', required=False, default=60, type=int,
                        help='Minimum percentage of query covered by hit alignment. By default 60.')
    plot_options = parser.add_argument_group('Summary abnd plotting options.')
    plot_options.add_argument('--cluster', dest='cluster', action='store', required=False,
                        help=textwrap.dedent('''
                        Cluster genomes and/or modules. Select "cols" for genomes, "rows" for modules, or "both".
                        By default, no clustering
                        '''))
    plot_options.add_argument('--filename', dest='plot_filename', action='store', required=False, default='metabolic_summary_',
                        help='Prefix for output summary tables and plots. By default "metabolic_summary"')
    misc_options = parser.add_argument_group('Miscellaneous options.')
    misc_options.add_argument('-t', '--threads', dest='threads', action='store', required=False, default=1, type=int,
                        help='Threads to use per processed file, i.e. (per protein file). By default 1.')
    misc_options.add_argument('-p', '--processes', dest='processes', action='store', required=False, default=1, type=int,
                        help=textwrap.dedent('''
                        Number of processes to launch, i.e. number of protein files to process simultaneously.
                        Note this is different from threads. For more information see the README. By default 1.
                        '''))
    misc_options.add_argument('--light', dest='light', action='store_true', required=False,
                        help=textwrap.dedent('''
                        Use only KOfamscan and swissprot databases. By default also uses refseq and
                        trembl (only use if you built both using "MicrobeAnnotator_DB_Builder").
                        '''))
    misc_options.add_argument('--full', dest='full', action='store_true', required=False,
                        help=textwrap.dedent('''
                        Do not perform the iterative annotation but search all proteins against all databases
                        (Increases computation time).
                        '''))
    args = parser.parse_args()

    input_list = args.input_list
    output_dir = args.output_dir
    database_folder = args.database_folder
    method = args.method
    method = method.lower()
    kofam_bin = args.kofam_bin
    method_bin = args.method_bin
    id_perc = args.id_perc
    bitscore = args.bitscore
    evalue = args.evalue
    aln_percent = args.aln_percent
    threads = args.threads
    processes = args.processes
    light = args.light
    cluster = args.cluster
    if cluster != None:
        cluster = cluster.lower()
    plot_filename = args.plot_filename
    full = args.full

    # Check user input
    if method != 'blast' and method != 'diamond' and method != 'sword':
        exit('Please provide a valid search method with "-m", one of "blast", "diamond" or "sword"')
    print("---- This is MicrobeAnnotator ----")
    print('I will process a total of {} files. Of these, I will run {} in parallel with {} threads per file.'.format(
        str(len(input_list)), str(processes), str(threads)))
    if light == True:
        print('For this run I will use KOFamscan and the Swissprot database to annotate your proteins.')
    else:
        print('For this run I will use KOFamscan and the Swissprot, RefSeq and Trembl databases to annotate your proteins.')
    if cluster == None:
        print('When I\'m done I will plot the metabolism summaries using {} as file name prefix using no clustering.'.format(plot_filename))
    elif cluster == 'cols':
        print('When I\'m done I will plot the metabolism summaries using {} as file name prefix and cluster the genomes (cols)'.format(plot_filename))
    elif cluster == 'rows':
        print('When I\'m done I will plot the metabolism summaries using {} as file name prefix and cluster the modules (rows)'.format(plot_filename))
    elif cluster == 'both':
        print('When I\'m done I will plot the metabolism summaries using {} as file name prefix and cluster the genomes and modules'.format(plot_filename))
    else:
        exit('I do not recognize this clustering option: {}.'.format(cluster))
    print("---------\n")

    # Check kofamscan binary existence
    if kofam_bin == None:
        kofam_call = 'exec_annotation'
    else:
        kofam_call = str(Path(kofam_bin) / 'exec_annotation')
    if which(kofam_call) == None:
            if kofam_bin == None:
                exit("KOfamscan not found in PATH, please provide the correct path to the folder with binaries")
            else:
                exit("KOfamscan not found in " + kofam_bin + ", please provide the correct path to the folder with binaries")
    
    # Check kofamscan binary existence
    if method == 'blast':
        call_name = 'blastp'
    elif method == 'diamond':
        call_name = 'diamond'
    elif method == 'sword':
        call_name = 'sword'
    if method_bin == None:
        method_call = call_name
    else:
        method_call = str(Path(method_bin) / call_name)
    if which(method_call) == None:
            if method_bin == None:
                exit(method_call + " not found in PATH, please provide the correct path to the folder with binaries")
            else:
                exit(method_call + " not found in " + method_bin + ", please provide the correct path to the folder with binaries")

    # ----------------------------
    # Search the initial dataset with KOFamscan
    print("Searching proteins using KOFamscan...")
    try:
        pool = multiprocessing.Pool(processes)
        kofam_results = pool.map(partial(protein_search.kofamscan_annotation, 
        multi_argument=(output_dir, threads, kofam_bin)), input_list)
        # Results as (protein_file, protein_file_name, ids_proteins_annotated, final_file)
        # Final annotation fields:
        # query_id protein_id product ko_number ko_product taxonomy function compartment process database
    finally:
        pool.close()
        pool.join()
    # ----------------------------

    # Filter out the proteins already annotated
    # Create dictionary with information per protein file
    # Structure: protein_file : [protein_file_name, final_annotation_file, filtered_fasta_1it]
    print("Filtering KOFamscan results...")
    temporal_protein_folder = Path(output_dir) / "temporal_proteins"
    temporal_protein_folder.mkdir(parents=True, exist_ok=True)
    protein_file_info = {}
    for ko_result in kofam_results:
        protein_file_info[ko_result[0]] = [ko_result[1], ko_result[3]]
        outfile = str(temporal_protein_folder / (ko_result[1] + ".1it"))
        # Add first iteration protein files
        protein_file_info[ko_result[0]].append(outfile)
        if full == True:
            copyfile(ko_result[0],outfile)
        else:
            fasta_filter_list.fastA_filter_list(ko_result[0], outfile, ko_result[2], reverse=True)
    # ----------------------------

    # Search proteins NOT annotated with KOFamscan against Swissprot
    # Determine database to use
    print("Searching proteins against Swissprot using " + method + " ...")
    if method == "blast":
        swissprot_database = str(Path(database_folder) / "01.Protein_DB/uniprot_sprot")
    elif method == "diamond":
        swissprot_database = str(Path(database_folder) / "01.Protein_DB/uniprot_sprot.dmnd")
    elif method == "sword":
        swissprot_database = str(Path(database_folder) / "01.Protein_DB/uniprot_sprot.fasta")
    input_proteins = []
    for infor in protein_file_info.values():
        input_proteins.append(infor[-1])
    try:
        pool = multiprocessing.Pool(processes)
        arguments_to_pass = (output_dir, 'swissprot', swissprot_database, method,
                            threads, id_perc, bitscore, evalue, aln_percent, method_bin)
        search_results = pool.map(partial(protein_search.similarity_search,
        multiple_arguments=arguments_to_pass), input_proteins)
        # Results as (protein_file, filtered_search_file)
    finally:
        pool.close()
        pool.join()
    # Add name of filtered_search_results to protein_file_info
    # New structure: 
    # protein_file : [protein_file_name, final_annotation_file, filtered_fasta_1it, Swissprot_Search_File]
    temp_dir = protein_file_info.copy()
    for result in search_results:
        for filename, info in temp_dir.items():
            if result[0] == info[2]:
                protein_file_info[filename].append(result[1])
    del temp_dir

    # Search annotations in SQLite DB and append to the final annotation file
    print("Extracting annotation data...")
    sql_database = str(Path(database_folder) / "02.MicrobeAnnotator.db")
    for original_file, information in protein_file_info.items():
        filtered_sword_results = information[3]
        final_annotation_file = information[1]
        significant_hits = []
        with open(filtered_sword_results) as swissprot_results:
            for line in swissprot_results:
                line = line.strip().split()
                significant_hits.append((line[0], line[1]))
        if len(significant_hits) == 0:
            continue
        else:
            annotation = sqlite3_search.search_ids_imported(sql_database, "swissprot", significant_hits)
            # Each annotation will have:
            # query_id gene_id accession product ko_number organism taxonomy function compartment process
        if light == True:
            with open(final_annotation_file, 'a') as final_annotation_fh:
                for match in annotation:
                    final_annotation_fh.write("{}\t{}\t{}\t{}\tNA\t{}\t{}\t{}\t{}\tswissprot\n".format(match[0],
                    match[1], match[3], match[4], match[6], match[7], match[8], match[9]))
            if temporal_protein_folder.is_dir():
                rmtree(temporal_protein_folder)
        else:
            # Check if all annotations have ko numbers, if not, get ids to next round of iteration
            gene_ids_no_ko = []
            with open(final_annotation_file, 'a') as final_annotation_fh:
                for match in annotation:
                    if match[4] != "":
                        final_annotation_fh.write("{}\t{}\t{}\t{}\tNA\t{}\t{}\t{}\t{}\tswissprot\n".format(match[0],
                        match[1], match[3], match[4], match[6], match[7], match[8], match[9]))
                    else:
                        gene_ids_no_ko.append(match[0])
            # If there are ids with no annotations filter the iteration 1 protein file
            second_it_outfile = str(temporal_protein_folder / (protein_file_info[original_file][0] + ".2it"))
            if full == True:
                copyfile(protein_file_info[original_file][2],second_it_outfile)
                protein_file_info[original_file].append(second_it_outfile)
            else:
                if len(gene_ids_no_ko) > 0:
                    protein_file_info[original_file].append(second_it_outfile)
                    fasta_filter_list.fastA_filter_list(protein_file_info[original_file][2], 
                    second_it_outfile, gene_ids_no_ko, reverse=True)
    # -----------------------

    # If running complete pipeline search against refseq
    if light == False:
        # Determine database to use
        print("Searching proteins against RefSeq...")
        if method == "blast":
            refseq_database = str(Path(database_folder) / "01.Protein_DB/refseq_protein")
        elif method == "diamond":
            refseq_database = str(Path(database_folder) / "01.Protein_DB/refseq_protein.dmnd")
        elif method == "sword":
            refseq_database = str(Path(database_folder) / "01.Protein_DB/refseq_protein.fasta")
        input_proteins = []
        for infor in protein_file_info.values():
            if len(infor) == 5:
                input_proteins.append(infor[-1])
        if len(input_proteins) > 0:
            try:
                pool = multiprocessing.Pool(processes)
                arguments_to_pass = (output_dir, 'refseq', refseq_database, method,
                                    threads, id_perc, bitscore, evalue, aln_percent, method_bin)
                search_results = pool.map(partial(protein_search.similarity_search,
                multiple_arguments=arguments_to_pass), input_proteins)
                # Results as (protein_file, filtered_search_file)
            finally:
                pool.close()
                pool.join()
        # Add name of filtered_search_results to protein_file_info
        # New structure: 
        # protein_file : [protein_file_name, final_annotation_file, filtered_fasta_1it, Swissprot_Search_File,
        # filtered_fasta_2it, RefSeq_Search_File]
        temp_dir = protein_file_info.copy()
        for result in search_results:
            for filename, info in temp_dir.items():
                if len(info) == 5 and result[0] == info[4]:
                    protein_file_info[filename].append(result[1])
        del temp_dir
        # --------------------------

        # Search annotations in SQLite DB and append to the final annotation file
        print("Extracting annotation data...\n")
        for original_file, information in protein_file_info.items():
            if len(information) == 6:
                filtered_sword_results = information[5]
                final_annotation_file = information[1]
                significant_hits = []
                with open(filtered_sword_results) as swissprot_results:
                    for line in swissprot_results:
                        line = line.strip().split()
                        significant_hits.append((line[0], line[1]))
                if len(significant_hits) == 0:
                    continue
                else:
                    annotation = sqlite3_search.search_ids_imported(sql_database, "refseq", significant_hits)
                    # Each annotation will have:
                    # query_id gene_id product taxonomy ko_number ko_product
                # Check if all annotations have ko numbers, if not, get ids to next round of iteration
                gene_ids_no_ko = []
                with open(final_annotation_file, 'a') as final_annotation_fh:
                # Final annotation fields:
                # query_id protein_id product ko_number ko_product taxonomy function compartment process database
                    for match in annotation:
                        if match[4] != "" and match[4] != "NA":
                            final_annotation_fh.write("{}\t{}\t{}\t{}\t{}\t{}\tNA\tNA\tNA\trefseq\n".format(match[0],
                            match[1], match[2], match[4], match[5], match[3]))
                        else:
                            gene_ids_no_ko.append(match[0])
                # If there are ids with no annotations filter the iteration 1 protein file
                third_it_outfile = str(temporal_protein_folder / (protein_file_info[original_file][0] + ".3it"))
                if full == True:
                    protein_file_info[original_file].append(third_it_outfile)
                    copyfile(protein_file_info[original_file][2],second_it_outfile)
                else:
                    if len(gene_ids_no_ko) > 0:
                        protein_file_info[original_file].append(third_it_outfile)
                        fasta_filter_list.fastA_filter_list(protein_file_info[original_file][4], 
                        third_it_outfile, gene_ids_no_ko, reverse=True)
                        # New structure: 
                        # protein_file : [protein_file_name, final_annotation_file, filtered_fasta_1it, Swissprot_Search_File,
                        # filtered_fasta_2it, RefSeq_Search_File, filtered_fasta_3it]
        # Finally run remaining proteins against Trembl
        print("Searching proteins against Trembl...\n")
        if method == "blast":
            trembl_database = str(Path(database_folder) / "01.Protein_DB/uniprot_trembl")
        elif method == "diamond":
            trembl_database = str(Path(database_folder) / "01.Protein_DB/uniprot_trembl.dmnd")
        elif method == "sword":
            trembl_database = str(Path(database_folder) / "01.Protein_DB/uniprot_trembl.fasta")
        input_proteins = []
        for infor in protein_file_info.values():
            if len(infor) == 7:
                input_proteins.append(infor[-1])
        if len(input_proteins) > 0:
            try:
                pool = multiprocessing.Pool(processes)
                arguments_to_pass = (output_dir, 'trembl', trembl_database, method,
                                    threads, id_perc, bitscore, evalue, aln_percent, method_bin)
                search_results = pool.map(partial(protein_search.similarity_search,
                multiple_arguments=arguments_to_pass), input_proteins)
                # Results as (protein_file, filtered_search_file)
            finally:
                pool.close()
                pool.join()
        # Add name of filtered_search_results to protein_file_info
        # New structure: 
        # protein_file : [protein_file_name, final_annotation_file, filtered_fasta_1it, Swissprot_Search_File,
        # filtered_fasta_2it, RefSeq_Search_File, filtered_fasta_3it, Trembl_Search_File]
        temp_dir = protein_file_info.copy()
        for result in search_results:
            for filename, info in temp_dir.items():
                if len(info) == 7 and result[0] == info[6]:
                    protein_file_info[filename].append(result[1])
        del temp_dir
        # --------------------------

        # Search annotations in SQLite DB and append to the final annotation file
        print("Extracting annotation data...\n")
        for original_file, information in protein_file_info.items():
            if len(information) == 8:
                filtered_sword_results = information[7]
                final_annotation_file = information[1]
                significant_hits = []
                with open(filtered_sword_results) as swissprot_results:
                    for line in swissprot_results:
                        line = line.strip().split()
                        significant_hits.append((line[0], line[1]))
                if len(significant_hits) == 0:
                    continue
                else:
                    annotation = sqlite3_search.search_ids_imported(sql_database, "trembl", significant_hits)
                    # Each annotation will have:
                    # query_id gene_id product taxonomy ko_number ko_product
                # Check if all annotations have ko numbers, if not, get ids to next round of iteration
                gene_ids_no_ko = []
                with open(final_annotation_file, 'a') as final_annotation_fh:
                # Final annotation fields:
                # query_id protein_id product ko_number ko_product taxonomy function compartment process database
                    for match in annotation:
                        final_annotation_fh.write("{}\t{}\t{}\t{}\tNA\t{}\t{}\t{}\t{}\ttrembl\n".format(match[0],
                        match[1], match[3], match[4], match[6], match[7], match[8], match[9]))
        if temporal_protein_folder.is_dir():
                rmtree(temporal_protein_folder)
        # ------------------------

    # Parse annotation files and summarize them
    print("Extracting ko numbers and summarizing results...")
    annotation_files = []
    for information in protein_file_info.values():
        annotation_folder = information[1].parent
        ko_numbers = str(annotation_folder / (information[0] + ".ko"))
        with open(information[1], 'r') as annotations, open(ko_numbers, 'w') as ko_present:
            for line in annotations:
                line = line.strip().split("\t")
                if line[3] != "":
                    ko_present.write("{}\n".format(line[3]))
        annotation_files.append(ko_numbers)
    prefix = plot_filename
    regular_modules, bifurcation_modules, structural_modules,  \
    module_information, metabolism_matrix, module_group_matrix = ko_mapper.module_information_importer(annotation_files)
    metabolic_annotation = ko_mapper.global_mapper(regular_modules, bifurcation_modules, structural_modules, annotation_files)
    metabolism_matrix_dropped_relabel, module_colors = ko_mapper.create_output_files(metabolic_annotation, metabolism_matrix, module_information, cluster, prefix)
    ko_mapper.plot_function_barplots(module_colors, module_group_matrix, metabolism_matrix_dropped_relabel, prefix)
    print("MicrobeAnnotator has finished succefully!")

if __name__ == "__main__":
    main()

