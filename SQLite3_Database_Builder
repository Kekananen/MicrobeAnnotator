#!/usr/bin/env python

"""
########################################################################
# Author:       Carlos A. Ruiz Perez
# Email:        cruizperez3@gatech.edu
# Intitution:   Georgia Institute of Technology
# Version:      0.9
# Date:         March 04, 2020

# Description: Create SQLite database from a tab-delimited table.
Used to create annotation parsing databases.
########################################################################
"""

################################################################################
"""---0.0 Import Modules---"""
import sqlite3
import csv
import re
from sys import exit

################################################################################
"""---1.0 Define Functions---"""
def create_table(database, input_table, table_name, column_names = None):
    header = False
    columns = None
    print("Checking table and column names...", end="")
    if check_table_name(table_name) == False:
        exit("Table name should only be composed of alphanumeric characters and underscores")
    conn = sqlite3.connect(database)
    conn.text_factory = str
    cursor = conn.cursor()
    # If no columns provided extract them from the first line.
    if column_names == None:
        Header = True
        with open(input_table) as input_file:
            columns = input_file.readline()
            columns = columns.strip().split("\t")
    else:
        columns = column_names
    for column in columns:
        if check_table_name(table_name) == False:
            exit("Column {} should only be composed of \
                alphanumeric characters and underscores".format(column))
    print("Done")
    columns_for_db = ", ".join(["%s text" % column for column in columns])
    print("Building table...", end="")
    # Remove previous database if exists.
    sql_comm = 'DROP TABLE IF EXISTS %s' % table_name
    cursor.execute(sql_comm)
    # Create new table with given column names
    sql_comm = 'CREATE TABLE %s (%s)' % (table_name, columns_for_db)
    cursor.execute(sql_comm)
    # Create index from the first column
    sql_comm = 'CREATE UNIQUE INDEX protein_id on %s (%s)' % (table_name, columns[0])
    cursor.execute(sql_comm)

    # Fill table with fields from input
    with open(input_table) as database_table:
        number_of_columns = len(columns)
        values = "? "*number_of_columns
        values = ','.join(values.split())
        protein_table = csv.reader(database_table, delimiter='\t')
        for row in protein_table:
            row = tuple(row)
            if header == True:
                header = False
            else:

                sql_comm = "INSERT INTO %s VALUES (?, ?, ?, ?)" % (table_name)
                cursor.execute(sql_comm, row)
        conn.commit()
    cursor.close()
    conn.close()

def check_table_name(table_name):
    approved = True
    for character in table_name:
        if not re.match(r'[A-Za-z0-9_]+$', character):
            approved = False
            break
    return approved


################################################################################
"""---3.0 Main Function---"""

def main():
    import argparse, sys
    # Setup parser for arguments.
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
            description='''This script builds a sqlite database from a tab separated table.\n'''
            '''By default it assumes the first line of the input table has headers, if not\n'''
            '''you must provide a list of headers as --header header1,header2,header3...\n'''
            '''Usage: ''' + sys.argv[0] + ''' -i [Input Table] -d [Database Name] -t [Table Name] --header [Header List]\n'''
            '''Global mandatory parameters: -i [Input Table] -d [Database Name] -t [Table Name]\n'''
            '''Optional Database Parameters: See ''' + sys.argv[0] + ' -h')
    parser.add_argument('-i', '--input', dest='input_table', action='store', required=True,
                        help='Input tab-delimited table to parse, by default assumes headers are present')
    parser.add_argument('-d', '--database', dest='database', action='store', required=True,
                        help='Database name, can be exisiting or new.')
    parser.add_argument('-t', '--table', dest='table_name', action='store', required=True,
                        help='Table within db to create, always overwrites if table with the same name is present.')
    parser.add_argument('--header', dest='headers', action='store', nargs='+', required=False,
                        help='Header list if not present in input table, enter as --header header1,header2,...')
    args = parser.parse_args()

    input_table = args.input_table
    database = args.database
    table_name = args.table_name
    headers = args.headers

    create_table(database, input_table, table_name, headers)


if __name__ == "__main__":
    main()
