#!/usr/bin/env python

"""
########################################################################
# Author:       Carlos A. Ruiz Perez
# Email:        cruizperez3@gatech.edu
# Intitution:   Georgia Institute of Technology
# Version:      0.9
# Date:         March 04, 2020

# Description: Create SQLite database from a tab-delimited table.
Used to create annotation parsing databases.
########################################################################
"""

################################################################################
"""---0.0 Import Modules---"""
import sqlite3
import csv
import re
from sys import exit
import pandas as pd
from sqlalchemy import create_engine

################################################################################
"""---1.0 Define Functions---"""
def create_sql_table(database, input_table, table_name, column_names):
    """ Creates a SQLite database using a tab-delimited table as input
    
    Arguments:
        database {string} -- New or existing database to create table into
        input_table {string} -- Table to parse and transform to SQLite db
        table_name {string} -- Name of table to create
        column_names {list} -- List of column names for table inside the db
    """
    print("Checking table and column names... ", end="")
    if check_table_name(table_name) == False:
        exit("Table name should only be composed of alphanumeric characters and underscores")
    for column in column_names:
        if check_table_name(table_name) == False:
            exit("Column {} should only be composed of \
                alphanumeric characters and underscores".format(column))
    columns_for_db = ", ".join(["%s text" % column for column in column_names])
    print("Done. Everything seems good.")

    # Create empty database
    print("Creating database... ", end="")
    conn = sqlite3.connect(database)
    conn.text_factory = str
    cursor = conn.cursor()
    # Remove previous database if exists.
    sql_comm = 'DROP TABLE IF EXISTS %s' % table_name
    cursor.execute(sql_comm)
    # Create new table with given column names
    sql_comm = 'CREATE TABLE %s (%s)' % (table_name, columns_for_db)
    cursor.execute(sql_comm)
    # Create index from the first column
    sql_comm = 'CREATE UNIQUE INDEX protein_id on %s (%s)' % (table_name, column_names[0])
    cursor.execute(sql_comm)
    conn.commit()
    cursor.close()
    conn.close()
    print("Done")

    # Read input table and populate database
    print("Populating database... ", end="")
    engine = create_engine('sqlite:///'+database, echo=False)
    connection = engine.connect()
    for table_chunk in pd.read_csv(input_table, sep="\t", chunksize=1000000, header=0):
        table_chunk.to_sql(table_name, con=engine, if_exists='append', index=False)
    connection.close()
    print("Done")

def check_table_name(name_string):
    """ Checks if string contains any non alpha-numeric
        characters or underscores.
    
    Arguments:
        name_string {string} -- String to evaluate
    
    Returns:
        approved {bool} -- Boolean evaluating if string passes test or not
    """
    approved = True
    for character in name_string:
        if not re.match(r'[A-Za-z0-9_]+', character):
            approved = False
            break
    return approved


################################################################################
"""---3.0 Main Function---"""

def main():
    import argparse, sys
    # Setup parser for arguments.
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
            description='''This script builds a sqlite database from a tab separated table.\n'''
            '''By default it assumes the first line of the input table has headers, if not\n'''
            '''you must provide a list of headers as --header header1,header2,header3...\n'''
            '''Usage: ''' + sys.argv[0] + ''' -i [Input Table] -d [Database Name] -t [Table Name] --header [Header List]\n'''
            '''Global mandatory parameters: -i [Input Table] -d [Database Name] -t [Table Name]\n'''
            '''Optional Database Parameters: See ''' + sys.argv[0] + ' -h')
    parser.add_argument('-i', '--input', dest='input_table', action='store', required=True,
                        help='Input tab-delimited table to parse, by default assumes headers are present')
    parser.add_argument('-d', '--database', dest='database', action='store', required=True,
                        help='Database name, can be exisiting or new.')
    parser.add_argument('-t', '--table', dest='table_name', action='store', required=True,
                        help='Table within db to create, always overwrites if table with the same name is present.')
    parser.add_argument('-c' ,'--colnames', dest='column_names', action='store', nargs='+', required=False,
                        help='Header list if not present in input table, enter as --header header1,header2,...')
    args = parser.parse_args()

    input_table = args.input_table
    database = args.database
    table_name = args.table_name
    column_names = args.column_names

    # ----------------------------
    create_sql_table(database, input_table, table_name, column_names)
    # ----------------------------

if __name__ == "__main__":
    main()
